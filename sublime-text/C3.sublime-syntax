%YAML 1.2
---
# TODO prototype for comments https://www.sublimetext.com/docs/syntax.html#prototype-context

# See http://www.sublimetext.com/docs/syntax.html
file_extensions:
  - c3
  - c3i
  - c3t

scope: source.c3

variables:
  INT: '[0-9](_?[0-9])*'
  HINT: '[a-fA-F0-9](_?[a-fA-F0-9])*'
  OINT: '[0-7](_?[0-7])*'
  BINT: '[0-1](_?[0-1])*'
  INTTYPE: '(?:[ui](8|16|32|64|128)|[Uu][Ll]{0,2}|[Ll]{1,2})'
  REALTYPE: '(?:[f](8|16|32|64|128)?)'
  E: '[Ee][+-]?[0-9]+'
  P: '[Pp][+-]?[0-9]+'
  CONST: '(?:_*[A-Z][_A-Z0-9]*)'
  TYPE:  '(?:_*[A-Z][_A-Z0-9]*[a-z][_a-zA-Z0-9]*)'
  IDENT: '(?:_*[a-z][_a-zA-Z0-9]*)'
  keyword: 'assert|asm|catch|inline|import|module|interface|try|var'
  control_keyword: 'break|case|continue|default|defer|do|else|for|foreach|foreach_r|if|nextcase|return|switch|while'
  ct_keyword: 'alignof|assert|assignable|default|defined|echo|embed|eval|error|exec|extnameof|feature|include|is_const|nameof|offsetof|qnameof|sizeof|stringify|vacount|vaconst|vaarg|vaexpr|vasplat'
  ct_control_keyword: 'case|else|endfor|endforeach|endif|endswitch|for|foreach|if|switch'
  base_type: 'void|bool|char|double|float|float16|int128|ichar|int|iptr|isz|long|short|uint128|uint|ulong|uptr|ushort|usz|float128|any|anyfault|typeid'
  attribute: 'align|benchmark|bigendian|builtin|callconv|compact|const|deprecated|dynamic|export|extern|finalizer|format|if|inline|init|link|littleendian|local|maydiscard|naked|noalias|nodiscard|noinit|noinline|nopadding|norecurse|noreturn|nosanitize|nostrip|obfuscate|operator|operator_r|operator_s|optional|overlap|packed|private|public|pure|reflect|safemacro|section|tag|test|unused|used|wasm|weak|winmain'
  TYPE_IDENT: '\b(?:{{base_type}})\b|\$?\b{{TYPE}}\b'

contexts:
  main:
    - include: top_level

  pop_on_semicolon:
    - match: ';'
      scope: punctuation.terminator.c3
      pop: true

  pop_on_colon:
    - match: ':'
      scope: punctuation.separator.c3
      pop: true

  pop_on_close_brace:
    - match: '\}'
      scope: punctuation.section.block.end.c3
      pop: true

  assign_right_expression:
    - match: '='
      scope: keyword.operator.assignment.c3
      set:
        - include: comments
        - include: pop_on_semicolon
        - include: expression

  top_level:
    - include: comments

    # Modifier
    - include: modifier_keywords

    - match: ';'
      scope: punctuation.terminator.c3

    # Compile Time Statements
    - match: '\$(?:assert|include|echo|exec)\b'
      scope: keyword.other.c3
      push:
        - include: comments
        - include: pop_on_semicolon
        - include: expression

    # Module
    - match: '\bmodule\b'
      scope: keyword.declaration.module.c3
      push:
        - meta_scope: meta.module.c3
        - include: comments
        - include: pop_on_semicolon
        - include: attribute
        - include: path
        - match: '{{IDENT}}'
          scope: meta.path.c3 entity.name.module.c3
          push: maybe_generic_params

    # Import
    - match: '\bimport\b'
      scope: keyword.control.import.c3
      push:
        - meta_scope: meta.import.c3
        - include: comments
        - include: pop_on_semicolon
        - include: punctuation
        - include: attribute
        - include: path
        - match: '{{IDENT}}'
          scope: meta.path.c3

    # Function/Macro
    - match: '\b(?:fn|macro)\b'
      scope: keyword.declaration.function.c3
      push: function

    # Alias
    - match: '\balias\b'
      scope: keyword.declaration.alias.c3
      push:
        - meta_scope: meta.alias.c3
        - include: comments
        - include: pop_on_semicolon
        # Variable/function/macro/method/constant alias
        - match: '\b(?:(@{{IDENT}})|({{IDENT}})|({{CONST}}))\b'
          captures:
            1: entity.name.function.c3
            2: variable.global.c3
            3: entity.name.constant.c3
          set:
            - include: comments
            - include: pop_on_semicolon
            - include: attribute
            - include: assign_right_expression

        # Type/function signature alias
        - match: '\b{{TYPE}}\b'
          branch_point: 
          scope: entity.name.type.c3
          set:
            - include: comments
            - include: pop_on_semicolon
            - include: attribute
            - include: assign_right_expression

    # Typedef
    - match: '\btypedef\b'
      scope: keyword.declaration.typedef.c3
      push:
        - meta_scope: meta.typedef.c3
        - include: comments
        - include: pop_on_semicolon
        - match: '\b{{TYPE}}\b'
          #scope: storage.type.c3
          scope: entity.name.type.c3
          set:
            - include: comments
            - include: pop_on_semicolon
            - include: attribute
            - include: assign_right_expression

    # Faultdef
    - match: '\bfaultdef\b'
      scope: keyword.declaration.faultdef.c3
      push:
        - meta_scope: meta.faultdef.c3
        - include: comments
        - include: pop_on_semicolon
        - include: attribute
        - match: '\b{{CONST}}\b'
          scope: entity.name.constant.c3
        - match: ','
          scope: punctuation.separator.c3

    # Attrdef
    - match: '\battrdef\b'
      scope: keyword.declaration.attrdef.c3
      push:
        - meta_scope: meta.attrdef.c3
        - include: comments
        - include: pop_on_semicolon
        - match: '@{{TYPE}}'
          scope: keyword.annotation.c3
          set:
            - include: comments
            - include: pop_on_semicolon
            - include: parameters
            - match: '='
              scope: keyword.operator.assignment.c3
              set:
                - include: comments
                - include: pop_on_semicolon
                - include: attribute
                - match: ','
                  scope: punctuation.separator.c3

    # Struct/Bitstruct/Union (structlikes)
    - include: structlike
              
    # Enum
    - match: '\benum\b'
      scope: keyword.declaration.enum.c3
      push:
        - meta_scope: meta.enum.c3
        - include: comments
        - match: '\b{{TYPE}}\b'
          scope: entity.name.enum.c3
        - include: attribute
        - match: ':'
          scope: punctuation.separator.c3
          push:
            - include: comments
            - match: '(?=\{)'
              pop: true
            - match: '\binline\b'
              scope: storage.modifier.c3 # TODO
            - include: type_no_generics
            # Enum parameters
            - include: parameters
            - include: attribute
        # Enum body
        - match: '(?=\{)'
          set:
            - match: '\{'
              scope: punctuation.section.block.begin.c3
              set:
                - meta_scope: meta.enum.body.c3 meta.block.c3
                - include: comments
                - include: pop_on_close_brace
                - match: '='
                  scope: keyword.operator.assignment.c3
                  push:
                    - match: '(?=,)'
                      pop: true
                    - include: expression
                - include: attribute
                - match: '\b{{CONST}}\b'
                  scope: entity.name.constant.c3
                - match: ','
                  scope: punctuation.separator.c3


    # Interface
    - match: '\binterface\b'
      scope: keyword.declaration.interface.c3
      push:
        - meta_scope: meta.interface.c3
        - include: comments
        - match: '\b{{TYPE}}\b'
          scope: entity.name.interface.c3
        - include: attribute
        - match: ':'
          scope: punctuation.separator.c3
          push:
            - match: '(?=\{)'
              pop: true
            - include: punctuation
            - include: type_no_generics
        - match: '(?=\{)'
          set:
            - match: '\{'
              scope: punctuation.section.block.begin.c3
              set:
                - meta_scope: meta.interface.body.c3 meta.block.c3
                - include: pop_on_close_brace
                - match: ';'
                  scope: punctuation.terminator.c3
                - match: '\bfn\b'
                  scope: keyword.declaration.function.c3
                  push: function

    # Global
    - include: declaration

  function:
    - meta_scope: meta.function.c3
    - include: comments
    - include: type
    - match: '\.'
      scope: punctuation.accessor.c3
    - match: '\@?\b{{IDENT}}\b'
      scope: entity.name.function.c3
    - match: '(?=\()'
      set: function_parameters

  function_parameters:
    - match: '\('
      scope: meta.function.parameters.c3 meta.group.c3 punctuation.section.group.begin.c3
      set:
        - meta_content_scope: meta.function.parameters.c3 meta.group.c3
        - include: comments
        - match: '\)'
          scope: punctuation.section.group.end.c3
          set: function_after_parameters
        # Parameters
        - include: type
        - include: punctuation
        - match: '\.\.\.'
          scope: keyword.operator.variadic.c3
        - match: '([$#@&]?{{IDENT}})'
          scope: variable.parameter.c3
          push:
            - include: comments
            - match: '(?=[,;)])'
              pop: true
            - include: attribute
            - match: '\.\.\.'
              scope: keyword.operator.variadic.c3
            # Parameter with default value
            - match: '='
              scope: keyword.operator.assignment.c3
              set:
                - match: '(?=[,;)])'
                  pop: true
                - include: expression
        - match: ';'
          push:
            - include: comments
            - match: '(?=\))'
              pop: true
            - match: '@{{IDENT}}'
              scope: entity.name.function.c3
            - include: parameters

  function_after_parameters:
    - meta_content_scope: meta.function.c3
    - include: comments
    - include: attribute
    # Signature only
    - match: '(?=;)'
      pop: true
    # Function body
    - match: '(?=\{)'
      set:
        - meta_scope: meta.function.c3
        - include: compound_stmt
    # Lambda body
    - match: '(?=\=>)'
      set:
        - meta_scope: meta.function.c3
        - match: '=>'
          scope: keyword.declaration.function.arrow.c3
          branch_point: function_arrow
          branch:
            - lambda_trailing_macro_body
            - lambda_expression

  func_macro_path_ident:
    - match: '::'
      scope: punctuation.accessor.c3
    - match: '\.'
      scope: punctuation.accessor.c3
    - match: '@?\b{{IDENT}}\b'
      scope: variable.function.c3
      push: maybe_generic_params
    - match: '\b{{TYPE}}\b'
      scope: storage.type.c3

  paren_func_macro_path_ident:
    - match: '\('
      push: 
        - match: '\)'
          set:
            - include: maybe_generic_params
            - match: '(?=\S)'
              pop: 1
        - include: paren_func_macro_path_ident
        - include: func_macro_path_ident
  
  macro_call_ident:
    - match: '\('
      set:
        - match: '\)'
          set:
            - include: maybe_generic_params
            - match: '(?=\S)'
              pop: 1
        - include: paren_func_macro_path_ident
        - include: func_macro_path_ident
    - match: '(?=\S)'
      set: 
        - include: func_macro_path_ident
        - match: '(?=\S)'
          pop: 1

  macro_call_args_or_fail:
    - match: '\('
      scope: meta.group.c3 punctuation.section.group.begin.c3
      set: function_call_args
    - match: '(?=\S)'
      fail: function_arrow
    
  trailing_macro_body_or_fail:
    - match: '\{'
      scope: punctuation.section.block.begin.c3
      push:
        - meta_scope: meta.block.c3 
        - match: '\}'
          scope: punctuation.section.block.end.c3
          set:
            - clear_scopes: 1
            - include: comments
            # Expect a top level statement
            - match: '(?=[^\sa-zA-Z_$;])'
              fail: function_arrow
            - match: '(?=[a-zA-Z_$;])'
              pop: 4
            
        - include: statements
    - match: '(?=\S)'
      fail: function_arrow

  lambda_trailing_macro_body:
    - match: '(?=\S)'
      push: [trailing_macro_body_or_fail, maybe_attribute, macro_call_args_or_fail, macro_call_ident]

  lambda_expression:
    - match: '(?=[;,)])'
      pop: 2
    - include: expression

  structlike:
    - match: '\b(?:(struct|bitstruct)|(union))\b'
      captures: 
        1: keyword.declaration.struct.c3
        2: keyword.declaration.union.c3
      push:
        - meta_scope: meta.struct.c3
        - include: comments
        - match: '{{TYPE}}'
          scope: entity.name.struct.c3
        - match: '{{IDENT}}'
          scope: variable.other.member.c3
        - include: attribute
        - match: ':'
          scope: punctuation.separator.c3
          push:
            - include: comments
            - match: '(?=\{)'
              pop: true
            - include: type_no_generics
            - include: attribute
        # Interface implementation
        - match: '\('
          scope: punctuation.section.group.begin.c3
          push:
            - meta_scope: meta.group.c3
            - include: comments
            - match: '\)'
              scope: punctuation.section.group.end.c3
              pop: true
            - include: path
            - include: type
            - include: punctuation
        # Struct body
        - match: '(?=\{)'
          set:
            - match: '\{'
              scope: punctuation.section.block.begin.c3
              set:
                - meta_scope: meta.struct.body.c3 meta.block.c3
                - include: comments
                - include: pop_on_close_brace
                - include: structlike
                - include: modifier_keywords
                - include: type
                - match: '{{IDENT}}'
                  scope: variable.other.member.c3
                - include: attribute
                - match: ';'
                  scope: punctuation.terminator.c3
                # Bitstruct
                - match: ':'
                  scope: punctuation.separator.c3
                  push:
                    - match: '(?=;)'
                      pop: true
                    - include: expression

  builtin:
    - match: '\$\$({{CONST}}|{{IDENT}})\b'
      scope: keyword.builtin.c3

  keywords:
    - match: '\$(?:{{ct_keyword}})\b'
      scope: keyword.other.ct.c3
    - match: '\$(?:{{ct_control_keyword}})\b'
      scope: keyword.control.ct.c3
    - match: '\b(?:{{keyword}})\b'
      scope: keyword.other.c3
    - match: '\b(?:{{control_keyword}})\b'
      scope: keyword.control.c3

  modifier_keywords:
    - match: '\b(?:extern|static|tlocal|inline)\b'
      scope: storage.modifier.c3
  
  punctuation:
    # No semicolon here because we always match it separately
    - match: ','
      scope: punctuation.separator.c3
    - match: ':'
      scope: punctuation.separator.c3
    - match: ':(?!:)'
      scope: punctuation.separator.c3
    - match: '::|\.(?!\.\.)'
      scope: punctuation.accessor.c3

  constants:
    - match: '\b(true|false|null)\b'
      scope: constant.language.c3
    - match: '\b{{CONST}}\b'
      scope: entity.name.constant.c3
      push: maybe_generic_params

  operators:
    - match: '&&&?|\|\|\|?'
      scope: keyword.operator.logical.c3
    - match: '!|\?[?:]?|\*|&|:'
      scope: keyword.operator.c3
    - match: '\.\.(?!\.)'
      scope: keyword.operator.range.c3
    - match: '\.\.\.'
      scope: keyword.operator.variadic.c3
    - match: '\+\+\+?|--'
      scope: keyword.operator.arithmetic.c3
    - match: '\+=|-=|\*=|/=|%=|&=|\|=|\^=|>>=|<<='
      scope: keyword.operator.assignment.augmented.c3
    - match: '<<|>>'
      scope: keyword.operator.arithmetic.c3
    - match: '<=|>=|==|<|>|\!='
      scope: keyword.operator.comparison.c3
    - match: '\+|\-|/|%|\||\^|~|!'
      scope: keyword.operator.arithmetic.c3
    - match: '='
      scope: keyword.operator.assignment.c3

  path:
    - match: '({{IDENT}})(::)'
      captures: 
        1: meta.path.c3
        2: meta.path.c3 punctuation.accessor.c3

  literals:
    - include: string_literal
    - include: char_literal
    - include: raw_string_literal
    - include: real_literal
    - include: integer_literal
    - include: bytes_literal

  char_literal:
    - match: "'"
      scope: punctuation.definition.string.begin.c3
      push:
      - meta_scope: string.quoted.single.c3
      - match: '\\.'
        scope: constant.character.escape.c3
      - match: "'"
        scope: punctuation.definition.string.end.c3
        pop: true

  string_literal:
    - match: '"'
      scope: punctuation.definition.string.begin.c3
      push:
      - meta_scope: string.quoted.double.c3
      - match: '\\([0abefnrtv''"\\]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})'
        scope: constant.character.escape.c3
      - match: '"'
        scope: punctuation.definition.string.end.c3
        pop: true

  raw_string_literal:
    - match: '`'
      scope: punctuation.definition.string.begin.c3
      push:
      - meta_scope: string.quoted.other.c3
      - match: '``'
        scope: constant.character.escape.c3
      - match: '`'
        scope: punctuation.definition.string.end.c3
        pop: true

  real_literal:
    - match: '\b{{INT}}{{REALTYPE}}'
      scope: constant.numeric.float.c3
    - match: '\b(?:{{INT}}{{E}}|{{INT}}\.(?!\.)(?:{{INT}})?(?:{{E}})?){{REALTYPE}}?'
      scope: constant.numeric.float.c3
    - match: '\b(?:0[xX]{{HINT}}{{P}}|0[xX]{{HINT}}\.(?!\.)(?:{{HINT}})?(?:{{P}})?)'
      scope: constant.numeric.float.c3

  integer_literal:
    - match: '\b(?:0[xX]{{HINT}}|0[oO]{{OINT}}|0[bB]{{BINT}}|{{INT}}){{INTTYPE}}?'
      scope: constant.numeric.integer.c3

  bytes_literal:
    - match: "(x)([\"'`])"
      captures:
        1: keyword.other.c3
        2: punctuation.definition.string.begin.c3
      push:
        - meta_scope: string.quoted.other.c3
        - match: "\\2"
          captures:
            0: punctuation.definition.string.end.c3
          pop: true
        - match: '[\sfA-Fa-f0-9]+'
          scope: constant.numeric.integer.c3
    - match: "(b64)([\"'`])"
      captures:
        1: keyword.other.c3
      push:
        - meta_scope: string.quoted.other.c3
        - match: "\\2"
          captures:
            0: punctuation.definition.string.end.c3
          pop: true
        - match: '[\sA-Za-z0-9+/=]+'
          scope: constant.numeric.integer.c3

  comments:
    - include: line_comment
    - include: block_comment
    - include: doc_comment
    - include: compound_stmt_comment

  line_comment:
    - match: '//'
      scope: punctuation.definition.comment.c3
      push: line_comment_body

  line_comment_body:
    - meta_scope: comment.line.double-slash.c3
    - match: $
      pop: true

  block_comment:
    - match: '/\*'
      scope: punctuation.definition.comment.begin.c3
      push: block_comment_body

  block_comment_body:
    - meta_scope: comment.block.c3
    - match: '/\*'
      scope: punctuation.definition.comment.begin.c3
      push: block_comment_body
    - match: '\*/'
      scope: punctuation.definition.comment.end.c3
      pop: true

  doc_comment:
    - match: '<\*'
      scope: punctuation.definition.comment.begin.c3
      push: doc_comment_body

  doc_comment_body:
    - meta_scope: comment.block.documentation.c3
    - match: '\*>'
      scope: punctuation.definition.comment.end.c3
      pop: true
    - include: doc_comment_content

  doc_comment_content:
    - match: '/\*'
      scope: punctuation.definition.comment.begin.c3
      push: block_comment_body
    - match: '@(param(\s*\[&?(in|out|inout)\])?|return\??|require|deprecated|ensure|pure)\s'
      scope: markup.bold

  type_parens:
    - match: '\('
      scope: punctuation.section.group.begin.c3
      push:
        - meta_scope: meta.group.c3
        - match: '\)'
          scope: punctuation.section.group.end.c3
          pop: 2
        - include: expression

  type_brackets:
    - match: '\['
      scope: punctuation.section.brackets.begin.c3
      push:
        - meta_scope: meta.brackets.c3
        - match: '\]'
          scope: punctuation.section.brackets.end.c3
          pop: 2
        - include: expression

  type:
    - include: path
    - match: '{{TYPE_IDENT}}'
      scope: storage.type.c3
      push: [maybe_type_suffix, maybe_generic_params]
    - match: '\$(?:typeof|typefrom|evaltype)\b'
      scope: storage.type.c3
      push: [maybe_type_suffix, type_parens]
    - match: '\$vatype\b'
      scope: storage.type.c3
      push: [maybe_type_suffix, type_brackets]

  type_no_generics:
    - include: path
    - match: '{{TYPE_IDENT}}'
      scope: storage.type.c3
      push: [maybe_type_suffix]
    - match: '\$(?:typeof|typefrom|evaltype)\b'
      scope: storage.type.c3
      push: [maybe_type_suffix, type_parens]
    - match: '\$vatype\b'
      scope: storage.type.c3
      push: [maybe_type_suffix, type_brackets]

  expect_type:
    - include: path
    - match: '{{TYPE_IDENT}}'
      scope: storage.type.c3
      set: [maybe_type_suffix, maybe_generic_params]
    - match: '\$(?:typeof|typefrom|evaltype)\b'
      scope: storage.type.c3
      set: [maybe_type_suffix, type_parens]
    - match: '\$vatype\b'
      scope: storage.type.c3
      set: [maybe_type_suffix, type_brackets]

  maybe_type_suffix:
    - meta_content_scope: meta.type_suffix.c3 # non-standard scope
    - include: comments
    - match: '\*'
      scope: keyword.operator.c3
    - match: '\?'
      scope: keyword.operator.c3
    - include: brackets
    - match: '(?=\S)'
      pop: true

  attribute:
    - match: '@(?:{{attribute}}|{{TYPE}})'
      scope: keyword.annotation.c3
      push: 
        - meta_scope: meta.annotation.c3
        - include: maybe_parens

  maybe_attribute:
    - match: '@(?:{{attribute}}|{{TYPE}})'
      scope: keyword.annotation.c3
      set: 
        - meta_scope: meta.annotation.c3
        - include: maybe_parens
    - match: '(?=\S)'
      pop: true

  declaration:
    - match: '\bconst\b'
      scope: storage.modifier.c3
      push:
        - meta_scope: meta.declaration.c3
        - match: '(?=\b{{CONST}}\b)'
          set: [maybe_declaration_after_type]
        - match: '(?=\S)'
          set: [maybe_declaration_after_type, expect_type]
    - match: '(?={{TYPE_IDENT}}|\$(?:typeof|typefrom|vatype|evaltype)\b)'
      push: [maybe_declaration_after_type, expect_type]
    - match: '\bvar\b'
      scope: storage.type.c3
      push:
        - meta_scope: meta.declaration.c3
        - include: comments
        - include: pop_on_semicolon
        - match: '\$?{{IDENT}}'
          scope: variable.other.c3
        - match: '\$?{{TYPE}}'
          scope: storage.type.c3
        - include: attribute
        - include: assign_right_expression
        - match: '(?=\S)'
          pop: true

  maybe_declaration_after_type:
    - meta_scope: meta.declaration.c3
    - include: comments
    - include: pop_on_semicolon
    - match: '\$?{{IDENT}}'
      scope: variable.other.c3
    - match: '\b{{CONST}}\b'
      scope: entity.name.constant.c3
    - include: attribute
    - include: assign_right_expression
    - match: '(?=\S)'
      pop: true

  control_statements:
    # CT for
    - match: '\$for\b'
      scope: keyword.control.ct.c3
      push:
        - include: pop_on_colon
        - include: statements
    # CT foreach
    - match: '\$foreach\b'
      scope: keyword.control.ct.c3
      push:
        - match: '\${{IDENT}}'
          scope: variable.other.c3
        - match: ','
          scope: punctuation.separator.c3
        - match: ':'
          scope: keyword.operator.c3
          set:
            - include: pop_on_colon
            - include: expression
    # for
    - match: '\bfor\b'
      scope: keyword.control.c3
      push:
        - include: comments
        - match: '\('
          scope: punctuation.section.group.begin.c3
          set:
            - meta_scope: meta.group.c3
            - match: '\)'
              scope: punctuation.section.group.end.c3
              pop: true
            - include: statements
    # CT switch/case/default/if
    - match: '\$(?:switch|case|default|if)\b'
      scope: keyword.control.ct.c3
      push:
        - include: pop_on_colon
        - include: expression
    # case/default
    - match: '\b(?:case|default)\b'
      scope: keyword.control.c3
      push:
        - include: pop_on_colon
        - include: expression

  statements:
    - include: comments
    - include: modifier_keywords
    - match: ';'
      scope: punctuation.terminator.c3

    - include: control_statements
    
    - include: declaration
    - include: expression

  variable:
    - match: '(?<!#)\$?{{IDENT}}\b'
      scope: variable.other.c3
      push: maybe_generic_params

  expression:
    - include: comments
    
    - match: '\bfn\b'
      scope: keyword.declaration.function.c3
      push: function

    - include: constants
    - include: builtin
    - include: literals
    - include: operators
    - include: keywords
    - include: type
    - include: path
    - include: function_call

    - include: variable

    - include: parens
    - include: brackets

    # Just assume anything in curly braces is a block of statements (even if it's an initializer list)
    - include: block
    - include: punctuation

  function_call_args:
    - meta_content_scope: meta.function-call.c3 meta.group.c3
    - include: comments
    - match: '\)'
      scope: meta.function-call.c3 meta.group.c3 punctuation.section.group.end.c3
      set: maybe_attribute
    - match: ';'
      scope: punctuation.separator.c3

    # Named argument
    - match: '([$#]?{{IDENT}}|\${{TYPE}})\s*(:(?!:))' # TODO using \s* doesn't match over multiple lines
      captures:
        1: variable.parameter.c3
        2: punctuation.separator.c3
      push:
        - meta_scope: meta.argument.c3
        - include: comments
        - match: '(?=[,;)])'
          pop: true
        - include: expression
    
    - include: expression

  function_call:
    - match: '([@#]?{{IDENT}}\b)(?=\s*(\{.*\})?\s*\()' # TODO using \s* doesn't match over multiple lines
      captures:
        1: variable.function.c3
      push:
        - meta_scope: meta.function-call.c3
        #- match: '[@#]?{{IDENT}}'
        #  scope: variable.function.c3
        - include: generic_params
        - match: '\('
          scope: meta.group.c3 punctuation.section.group.begin.c3
          set: function_call_args
            
  compound_stmt:
    - match: '\{'
      scope: punctuation.section.block.begin.c3
      push:
        - meta_scope: meta.block.c3
        - match: '\}'
          scope: punctuation.section.block.end.c3
          pop: 2
        - include: statements

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.c3
      push:
        - meta_scope: meta.block.c3
        - match: '\}'
          scope: punctuation.section.block.end.c3
          pop: true
        - include: statements

  parens:
    - match: '\('
      scope: punctuation.section.group.begin.c3
      push:
        - meta_scope: meta.group.c3
        - match: '\)'
          scope: punctuation.section.group.end.c3
          pop: true
        - include: expression

  maybe_parens:
    - match: '\('
      scope: punctuation.section.group.begin.c3
      push:
        - meta_scope: meta.group.c3
        - match: '\)'
          scope: punctuation.section.group.end.c3
          pop: 2
        - include: expression
    - match: '(?=\S)'
      pop: true

  brackets:
    - match: '\[<?'
      scope: punctuation.section.brackets.begin.c3
      push:
        - meta_scope: meta.brackets.c3
        - match: '>?\]'
          scope: punctuation.section.brackets.end.c3
          pop: true
        - include: expression

  generic_params:
    - match: '\{'
      scope: punctuation.definition.generic.begin.c3
      push:
        - meta_scope: meta.generic.c3
        - match: '\}'
          scope: punctuation.definition.generic.end.c3
          pop: true
        - include: expression

  maybe_generic_params:
    - match: '\{'
      scope: punctuation.definition.generic.begin.c3
      push:
        - meta_scope: meta.generic.c3
        - match: '\}'
          scope: punctuation.definition.generic.end.c3
          pop: 2
        - include: expression
    - match: '(?=\S)'
      pop: true

  parameters:
    - match: '\('
      scope: punctuation.section.group.begin.c3
      push:
        - meta_scope: meta.parameters.c3 meta.group.c3
        - include: comments
        - match: '\)'
          scope: punctuation.section.group.end.c3
          pop: true

        # Parameters
        - include: type
        - include: punctuation
        - match: '\.\.\.'
          scope: keyword.operator.variadic.c3
        - match: '([$#@&]?{{IDENT}})'
          scope: variable.parameter.c3
          push:
            - include: comments
            - match: '(?=[;,)])'
              pop: true
            - include: attribute
            - match: '\.\.\.'
              scope: keyword.operator.variadic.c3
            # Parameter with default value
            - match: '='
              scope: keyword.operator.assignment.c3
              set:
                - match: '(?=[;,)])'
                  pop: true
                - include: expression
